from flask import Flask, request, jsonify
from openai import OpenAI
from scrapper import extrair_tags_article
import os
import json
import logging

PROMPT = {
    "role": "system",
    "content": """
Você é um especialista em detecção de notícias falsas, com extenso conhecimento em diversas áreas, como política,
medicina, automóveis, vacinas, etc. Você vai receber notícias dos mais diversos ambitos e sua função é analisa-las
e baseadas em outras notícias de outras fontes que você terá que pesquisar, você irá me fazer as seguintes coisas:
1) Indique se essa notícia é possivelmente fake news.
2) Caso seja fakenews, indique os principais motivos, com referências, dentro da própria notícia. Caso não seja fakenews,
faça um resumo com as principais informações da notícia
3) Caso seja fakenews, apresente contrapontos com outras notícias confiáveis.
4) Dê um score entre 0 a 100% de qual a probabilidade dessa notícia ser fakenews. Entre 0 a 10, fale o quanto essa notícia
é enviésada.
5) Termine sua prompt ou com a palavra verdadeiro, caso a noticia, provavelmente, não seja veridica ou com a palavra falso, caso ela seja,
provavelmente, fake news.

A mensagem segue abaixo:
""",
}

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class OpenAiManager:
    def __init__(self):
        self.chat_history = []  # Stores the entire conversation
        try:
            self.client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
        except KeyError:
            exit("Ooops! You forgot to set OPENAI_API_KEY in your environment!")
        except Exception as e:
            exit(f"An error occurred while initializing OpenAI client: {e}")

    def chat(self, prompt):
        if not prompt:
            raise ValueError("Prompt cannot be empty")

        logger.info("Asking ChatGPT a question...")
        completion = self.client.chat.completions.create(
            model="gpt-4o-mini", messages=prompt
        )

        # Process the answer
        openai_answer = completion.choices[0].message.content

        # Extract verdict from the last word
        try:
            last_word = openai_answer.strip().split()[-1].lower().rstrip(".,!?;:")
            if "verdadeiro" in last_word:
                veridico = True
            elif "falso" in last_word:
                veridico = False
            else:
                raise ValueError(
                    f"Could not determine verdict. Last word received: '{last_word}'"
                )
        except IndexError:
            raise ValueError("Received an empty or malformed response from OpenAI.")

        logger.info(f"Response is verdict: {veridico}")
        return {"lineuzinho": openai_answer, "veridico": veridico}


# Initialize Flask app and OpenAiManager
app = Flask(__name__)
openai_manager = OpenAiManager()


@app.route("/ask", methods=["POST"])
def ask_chatgpt():
    """
    Endpoint to ask a question to ChatGPT.
    Expects a JSON payload: {"prompt": "Your question here"}
    Returns a JSON response: {"lineuzinho": "Answer", "veridico": true/false}
    """
    try:
        data = request.get_json()
        if not data or "url" not in data:
            return jsonify({"error": "Missing 'prompt' in JSON request"}), 400
        url = data["url"]
        text = extrair_tags_article(url)
        PROMPT["content"] = PROMPT["content"] + text
        result = openai_manager.chat(prompt=PROMPT)

        return jsonify(result), 200

    except ValueError as ve:
        logger.error(f"Value Error: {ve}")
        return jsonify({"error": str(ve)}), 400
    except Exception as e:
        logger.error(f"Internal Server Error: {e}")
        return (
            jsonify(
                {"error": "An internal error occurred while processing your request."}
            ),
            500,
        )


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
